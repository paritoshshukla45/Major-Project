import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Load the dataset from the CSV file
data = pd.read_excel('phase1Load.xlsx')

# Separate the features (X1, X2) and the target variable (Y)
X = data[['Load', 'Cycle']]
y = data['Ra']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train the polynomial regression model
poly_features = PolynomialFeatures(degree=2)
X_train_poly = poly_features.fit_transform(X_train)
X_test_poly = poly_features.transform(X_test)
model = LinearRegression()
model.fit(X_train_poly, y_train)

# Predict for user-input load and cycles
load_input = float(input("Enter the load: "))
cycles_input = float(input("Enter the number of cycles: "))
input_data = poly_features.transform([[load_input, cycles_input]])
prediction = model.predict(input_data)[0]
print(f"Predicted RA value: {prediction}")

# Plot actual vs predicted values
y_test_pred = model.predict(X_test_poly)
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_test_pred)
plt.xlabel('Actual RA')
plt.ylabel('Predicted RA')
plt.title('Actual vs Predicted RA')
plt.show()

# Plot RA vs Cycle for the predicted value
cycles_range = np.arange(data['Cycle'].min(), data['Cycle'].max()+1)
load_array = np.full_like(cycles_range, load_input)
X_pred = poly_features.transform(np.column_stack((load_array, cycles_range)))
y_pred = model.predict(X_pred)

plt.figure(figsize=(10, 6))
plt.plot(cycles_range, y_pred, label=f'Predicted RA for Load {load_input}')
plt.scatter(data['Cycle'], data['Ra'], label='Actual RA')
plt.xlabel('Number of Cycles')
plt.ylabel('RA')
plt.title('RA vs Number of Cycles')
plt.legend()
plt.show()


# Plot 2nd phase


import math as m
# Define the constant y-value
constant_y = prediction  # Example: Change this to your desired constant y-value
x_limit=int(m. exp((30.323-prediction)/0.95))
# Define the range of x-values
x_values = range(1000, x_limit)  # Example: Range from -10 to 10

# Create y-values with the constant value
y_values = [constant_y] * len(x_values)


# Plot the horizontal line
plt.plot(x_values, y_values, label=f'RA = {constant_y}', color='blue')

# Add labels and title
plt.xlabel('cycle')
plt.ylabel('RA9')
plt.title('Variation of RA for stage 2')

# Add legend
plt.legend()

# Show the plot
plt.grid(True)
plt.axhline(0, color='black', linewidth=0.5)  # Add horizontal line at y=0 for reference
plt.axvline(0, color='black', linewidth=0.5)  # Add vertical line at x=0 for reference
plt.show()
